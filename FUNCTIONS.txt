1.Which of the following statements are correct about the function?
 long fun(int num){
    int i;
    long f=1;
    for(i=1; i<=num; i++)
        f = f * i;
    return f;  }
A. The function calculates the value of 1 raised to power num.
B. The function calculates the square root of an integer
C. The function calculates the FACTORIAL value of an integer
D. None of above
-----------------------------------------------
 Answer & Explanation
Answer : Option C

Explanation :

Yes, this function calculates and return the factorial value of an given integer num.

-------------------------------------------

2.There is a error in the below program. Which statement will you add to remove it?
#include<stdio.h>
int main(){
    int a;
    a = f(10, 3.14);
    printf("%d\n", a);
    return 0;}
float f(int aa, float bb){
    return ((float)aa + bb);}
A. Add prototype: float f(aa, bb)
B. Add prototype: float f(int, float)
C. Add prototype: float f(float, int)
D. Add prototype: float f(bb, aa)

---------------------------------------------
 Answer & Explanation
Answer : Option B

Explanation :
The correct form of function f prototype is float f(int, float);

---------------------------------------------------
3.Which of the following statements are correct about the program?
#include<stdio.h>
int main(){
    printf("%p\n", main());
    return 0;}
A. It prints garbage values infinitely
B. Runs infinitely without printing anything
C. Error: main() cannot be called inside printf()
D. No Error and print nothing

------------------------------------------------
 Answer & Explanation
Answer : Option B

Explanation :

In printf("%p\n", main()); it calls the main() function and then it repeats infinetly,

 untill stack overflow.

-----------------------------------------------

4.Point out the error in the program
  #include<stdio.h>
   int main(){
    int a=10;   
    void f();  
     a = f();
    printf("%d\n", a);
    return 0;}
        void f(){  
 printf("Hi");}
A. Error: Not allowed assignment
B. Error: Doesn't print anything
C. No error
D. None of above

-----------------------------------------------
Answer : Option A

Explanation :

The function void f() is not visible to the compiler while going through main() function. 

So we have to declare this prototype void f(); before to main() function. This kind of 

error will not occur in modern compilers.
------------------------------------------
5.#include<stdio.h>//Point out the error in the program
 int f(int a){
  a > 20? return(10): return(20);
  }
int main(){
    int f(int);
    int b;
    b = f(20);
    printf("%d\n", b);
    return 0;}
 A. Error: Prototype declaration
 B. No error
 C. Error: return statement cannot be used with conditional    operators
 D. None of above


----------------------------------------------------------
 Answer & Explanation

Answer : Option C

Explanation :

In a ternary operator, we cannot use the return statement. The ternary operator

 requires expressions but not code.

---------------------------------------------
6.What will be the output of the program?
 #include<stdio.h>
 int fun(int);
 int main(){
    float k=3;
    fun(k=fun(fun(k)));
    printf("%f\n", k);
    return 0;}
 int fun(int i){
    i++;
    return i;}
 A. 5.000000   B. 3.000000  C. Garbage value D. 4.000000

----------------------------------------------------
 Answer & Explanation


Answer : Option A

Explanation :

No answer description available for this question. 
---------------------------------------------------

7.What will be the output of the program?
  #include<stdio.h>
  int fun(int i){
    i++;
    return i; }
  int main(){
    int fun(int);
    int i=3;
    fun(i=fun(fun(i)));
    printf("%d\n", i);
    return 0; }
  A. 5  B. 4   C. Error  D. Garbage value

--------------------------------------------------

Answer : Option A

Explanation :
Step 1: int fun(int); This is prototype of function fun(). It tells the compiler that the function
 fun() accept one integer parameter and returns an integer value.
Step 2: int i=3; The variable i is declared as an integer type and initialized to value 3.
Step 3: fun(i=fun(fun(i)));. The function fun(i) increements the value of i by 1(one) and return it.
Lets go step by step,
=> fun(i) becomes fun(3) is called and it returns 4.
=> i = fun(fun(i)) becomes i = fun(4) is called and it returns 5 and stored in variable i.(i=5)
=> fun(i=fun(fun(i))); becomes fun(5); is called and it return 6 and nowhere the return value is stored.
Step 4: printf("%d\n", i); It prints the value of variable i.(5)
Hence the output is '5'.

------------------------------------------
8.What will be the output of the program?
  #include<stdio.h>
  int fun(int(*)());
  int main(){
    fun(main);
    printf("Hi\n");
    return 0;}
  int fun(int (*p)()) {
    printf("Hello ");
    return 0; }
A. Infinite loop  B. Hi  C. Hello Hi  D. Error

------------------------------------------------
 Answer & Explanation
Answer : Option C

-------------------------------------------------

9.What will be the output of the program?
  #include<stdio.h>
  int check(int);
  int main(){
    int i=45, c;
    c = check(i);
    printf("%d\n", c);
    return 0;}
  int check(int ch){
    if(ch >= 45)
        return 100;
    else
        return 10;}
A. 100B. 10  C. 1D. 0

---------------------------------------------------
 Answer & Explanation
Answer : Option A

Explanation :

Step 1: int check(int); This prototype tells the compiler that the function check()accepts one

 integer parameter and returns an integer value.

Step 2: int l=45, c; The variable i and c are declared as an integer type and i is initialized to 45.

The function check(i) return 100 if the given value of variable i is >=(greater than or equal to) 45, 

else it will return 10.

Step 3: c = check(i); becomes c = check(45); The function check() return 100 and it get stored in

 the variable c.(c = 100)

Step 4: printf("%d\n", c); It prints the value of variable c.

Hence the output of the program is '100'.

----------------------------------------------------------

10.What will be the output of the program?
  #include<stdio.h>
int addmult(int ii, int jj){
    int kk, ll;
    kk = ii + jj;
    ll = ii * jj;
    return (kk, ll);}
  int main(){
    int i=3, j=4, k, l;
    k = addmult(i, j);
    l = addmult(i, j);
    printf("%d %dn", k, l);
    return 0;}
 A. 12, 12B. 7, 7  C. 7, 12  D. 12, 7

--------------------------------------------------

Answer : Option A

Explanation :

Step 1: int i=3, j=4, k, l; The variables i, j, k, l are declared as an integer type and variable 
i, j are initialized to 3, 4 respectively.
The function addmult(i, j); accept 2 integer parameters.
Step 2: k = addmult(i, j); becomes k = addmult(3, 4)
In the function addmult(). The variable kk, ll are declared as an integer type int kk, ll;
kk = ii + jj; becomes kk = 3 + 4 Now the kk value is '7'.
ll = ii * jj; becomes ll = 3 * 4 Now the ll value is '12'.
return (kk, ll); It returns the value of variable ll only.
The value 12 is stored in variable 'k'.
Step 3: l = addmult(i, j); becomes l = addmult(3, 4)
kk = ii + jj; becomes kk = 3 + 4 Now the kk value is '7'.
ll = ii * jj; becomes ll = 3 * 4 Now the ll value is '12'.
return (kk, ll); It returns the value of variable ll only.
The value 12 is stored in variable 'l'.
Step 4: printf("%d, %d\n", k, l); It prints the value of k and l
Hence the output is "12, 12".

-------------------------------------------------
11.What will be the output of the program?
 #include<stdio.h>
 int func1(int);
  int main(){
    int k=35;
    k = func1(k=func1(k=func1(k)));
    printf("k=%d\n", k);
    return 0;}
int func1(int k){
    k++;
    return k;}
A. k=35  B. k=36  C. k=37D. k=38

----------------------------------------------------
 Answer & Explanation

Answer : Option D

Explanation :

Step 1: int k=35; The variable k is declared as an integer type and initialized to 35.

Step 2: k = func1(k=func1(k=func1(k))); The func1(k) increement the value of k by 1

 and return it. Here the func1(k) is called 3 times. Hence it increements value of k = 35

 to 38. The result is stored in the variable k = 38.

Step 3: printf("k=%d\n", k); It prints the value of variable k "38".


-----------------------------------------------
12.What will be the output of the program?
   #include<stdio.h>
    int i;
    int fun1(int);                   int fun1(int j){
    int fun2(int);                   printf("%d,", ++j);
    int main(){                      return 0;}
    extern int j;                    int fun2(int i){
    int i=3;                         printf("%d,", ++i);
    fun1(i);                         return 0;}
    printf("%d,", i);                int j=1;
    fun2(i);
    printf("%d", i);
    return 0;} 
 A. 3, 4, 4, 3 B. 4, 3, 4, 3 C. 3, 3, 4, 4 D. 3, 4, 3, 4

--------------------------------------------------------------

Answer : Option B
Explanation :
Step 1: int i; The variable i is declared as an global and integer type.
Step 2: int fun1(int); This prototype tells the compiler that the fun1() accepts the one integer 
parameter and returns the integer value.
Step 3: int fun2(int); This prototype tells the compiler that the fun2() accepts the one integer
 parameter and returns the integer value.
Step 4: extern int j; Inside the main function, the extern variable j is declared and defined in 
another source file.
Step 5: int i=3; The local variable i is defines as an integer type and initialized to 3.
Step 6: fun1(i); The fun1(i) increements the given value of variable i prints it. Here fun1(i) becomes
 fun1(3) hence it prints '4' then the control is given back to the mainfunction.
Step 7: printf("%d,", i); It prints the value of local variable i. So, it prints '3'.
Step 8: fun2(i); The fun2(i) increements the given value of variable i prints it. Here fun2(i) becomes
 fun2(3) hence it prints '4' then the control is given back to the mainfunction.
Step 9: printf("%d,", i); It prints the value of local variable i. So, it prints '3'.
Hence the output is "4 3 4 3".

------------------------------------------------------

13.What will be the output of the program?
 #include<stdio.h>
 int addmult(int ii, int jj){
    int kk, ll;
    kk = ii + jj;
    ll = ii * jj;
    return (kk, ll);}
  int main(){
    int i=3, j=4, k, l;
    k = addmult(i, j);
    l = addmult(i, j);
    printf("%d %d\n", k, l);
    return 0;}
A. 12 12                   B. No error, No output
C. Error: Compile error    D. None of above

----------------------------------------------

Answer & Explanation
Answer : Option A

-------------------------------------------------

14.What will be the output of the program?
#include<stdio.h>
  int check (int, int);
  int main(){
    int c;
    c = check(10, 20);
    printf("c=%d\n", c);
    return 0;}
  int check(int i, int j){
    int *p, *q;
    p=&i;
    q=&j;
    i>=45 ? return(*p): return(*q);}
A. Print 10 B. Print 20  C. Print 1 D. Compile error
--------------------------------------------------------------

Answer : Option D

Explanation :

There is an error in this line i>=45 ? return(*p): return(*q);. We cannot use

 returnkeyword in the terenary operators.

----------------------------------------------------

15.What will be the output of the program?
#include<stdio.h>
int main(){
    int fun(int);
    int i = fun(10);
    printf("%d\n", --i);
    return 0;}
int fun(int i){
   return (i++);}
 A. 9  B. 10  C. 11  D. 8

--------------------------------------------------------

Answer : Option A

Explanation :

Step 1: int fun(int); Here we declare the prototype of the function fun().

Step 2: int i = fun(10); The variable i is declared as an integer type and 

the result of the fun(10) will be stored in the variable i.

Step 3: int fun(int i){ return (i++); } Inside the fun() we are returning a value

 return(i++). It returns 10. because i++ is the post-increement operator.

Step 4: Then the control back to the main function and the value 10 is assigned

 to variable i.

Step 5: printf("%dn", --i); Here --i denoted pre-increement. Hence it prints the value 9
